clc
clear
close all

warning('off','all')
warning

folder = 'C:\Users\raque\OneDrive\Escritorio\UU\team challenge\landmarks\Contr5\'; % replace with the path of your folder
files = dir(fullfile(folder, '*')); % get information about all files and folders in the directory
files = files(~[files.isdir]); % keep only non-directory files
filepaths = fullfile(folder, {files.name}); % create full file paths for each file
disp(filepaths)

%% Read json files

for i = 1:length(filepaths)
    fid = fopen(filepaths{i}, 'r');
    json_str = fscanf(fid, '%c', inf);
    fclose(fid);
    json_data = jsondecode(json_str);
    controlPoints{i} = json_data.markups.controlPoints;
    %positions = {controlPoints.position};
    % add the positions to a nested cell array
    % this will contain all the coordinates of the landmarks of all the
    % files
    %cpPositions{i} = positions;
end
% eight landmarks per each rib, coordinates in 3D
positions_rib1 = zeros(8, 3);
positions_rib3 = zeros(8, 3);
positions_rib5 = zeros(8, 3);
positions_rib7 = zeros(8, 3);

for i = 1:length(controlPoints)
    for j = 1:length(controlPoints{i})
        if i == 1
           positions_rib1(j,:) = controlPoints{i}(j).position;
        end
        if i == 2
            positions_rib3(j,:) = controlPoints{i}(j).position;
        end
        if i == 3
            positions_rib5(j,:) = controlPoints{i}(j).position;
        end
        if i == 4
            positions_rib7(j,:) = controlPoints{i}(j).position;
        end
    end
    
end

%% Interpolation 1st rib

x_rib1_1 = [positions_rib1(2,1);positions_rib1(1,1);positions_rib1(6,1);positions_rib1(4,1)];
y_rib1_1 = [positions_rib1(2,2);positions_rib1(1,2);positions_rib1(6,2);positions_rib1(4,2)];
z_rib1_1 = [positions_rib1(2,3);positions_rib1(1,3);positions_rib1(6,3);positions_rib1(4,3)];
t = [1,2,3,4]; % Assumed time stamp

% Apply interpolation for each x,y and z 
tt = linspace(t(1),t(end));
xx_rib1_1 = interp1(t,x_rib1_1,tt,'spline');
yy_rib1_1 = interp1(t,y_rib1_1,tt,'spline');
zz_rib1_1 = interp1(t,z_rib1_1,tt,'spline');

x_rib1_2 = [positions_rib1(2,1);positions_rib1(3,1);positions_rib1(8,1);positions_rib1(4,1)];
y_rib1_2 = [positions_rib1(2,2);positions_rib1(3,2);positions_rib1(8,2);positions_rib1(4,2)];
z_rib1_2 = [positions_rib1(2,3);positions_rib1(3,3);positions_rib1(8,3);positions_rib1(4,3)];

% Apply interpolation for each x,y and z 
xx_rib1_2 = interp1(t,x_rib1_2,tt,'spline');
yy_rib1_2 = interp1(t,y_rib1_2,tt,'spline');
zz_rib1_2 = interp1(t,z_rib1_2,tt,'spline');

% Visualize the result
subplot(4,2,1)
scatter3(x_rib1_1,y_rib1_1,z_rib1_1, 'MarkerEdgeColor','r')
hold on
scatter3(x_rib1_2,y_rib1_2,z_rib1_2, 'MarkerEdgeColor','b')
hold on
plot3(xx_rib1_1,yy_rib1_1,zz_rib1_1, 'color','r')
hold on
plot3(xx_rib1_2,yy_rib1_2,zz_rib1_2, 'color','b')
hold off
title('Rib 1');

subplot(4,2,2)
spline_rib_func_flip(positions_rib1);

        % ax = subplot(4,2,3,'Visible','off');
        % axPos = ax.Position;
        % delete(ax)
        % % Construct a Legend with the data from the sub-plots
        % hL = legend(['Right', 'Left']); 
        % % Move the legend to the position of the extra axes
        % hL.Position(1:2) = axPos(1:2);

% Interpolation 3r

x_rib3_1 = [positions_rib3(2,1);positions_rib3(1,1);positions_rib3(6,1);positions_rib3(4,1)];
y_rib3_1 = [positions_rib3(2,2);positions_rib3(1,2);positions_rib3(6,2);positions_rib3(4,2)];
z_rib3_1 = [positions_rib3(2,3);positions_rib3(1,3);positions_rib3(6,3);positions_rib3(4,3)];

% Apply interpolation for each x,y and z 
xx_rib3_1 = interp1(t,x_rib3_1,tt,'spline');
yy_rib3_1 = interp1(t,y_rib3_1,tt,'spline');
zz_rib3_1 = interp1(t,z_rib3_1,tt,'spline');

x_rib3_2 = [positions_rib3(2,1);positions_rib3(3,1);positions_rib3(8,1);positions_rib3(4,1)];
y_rib3_2 = [positions_rib3(2,2);positions_rib3(3,2);positions_rib3(8,2);positions_rib3(4,2)];
z_rib3_2 = [positions_rib3(2,3);positions_rib3(3,3);positions_rib3(8,3);positions_rib3(4,3)];

% Apply interpolation for each x,y and z 
xx_rib3_2 = interp1(t,x_rib3_2,tt,'spline');
yy_rib3_2 = interp1(t,y_rib3_2,tt,'spline');
zz_rib3_2 = interp1(t,z_rib3_2,tt,'spline');

% Visualize the result
subplot(4,2,3)
scatter3(x_rib3_1,y_rib3_1,z_rib3_1, 'MarkerEdgeColor','r')
hold on
scatter3(x_rib3_2,y_rib3_2,z_rib3_2, 'MarkerEdgeColor','b')
hold on
plot3(xx_rib3_1,yy_rib3_1,zz_rib3_1, 'color','r')
hold on
plot3(xx_rib3_2,yy_rib3_2,zz_rib3_2, 'color','b')
title('Rib 3');
hold off

subplot(4,2,4)
spline_rib_func_flip(positions_rib3);


% Interpolation 5th

x_rib5_1 = [positions_rib5(2,1);positions_rib5(1,1);positions_rib5(6,1);positions_rib5(4,1)];
y_rib5_1 = [positions_rib5(2,2);positions_rib5(1,2);positions_rib5(6,2);positions_rib5(4,2)];
z_rib5_1 = [positions_rib5(2,3);positions_rib5(1,3);positions_rib5(6,3);positions_rib5(4,3)];
xx_rib5_1 = interp1(t,x_rib5_1,tt,'spline');
yy_rib5_1 = interp1(t,y_rib5_1,tt,'spline');
zz_rib5_1 = interp1(t,z_rib5_1,tt,'spline');

x_rib5_2 = [positions_rib5(2,1);positions_rib5(3,1);positions_rib5(8,1);positions_rib5(4,1)];
y_rib5_2 = [positions_rib5(2,2);positions_rib5(3,2);positions_rib5(8,2);positions_rib5(4,2)];
z_rib5_2 = [positions_rib5(2,3);positions_rib5(3,3);positions_rib5(8,3);positions_rib5(4,3)];
% Apply interpolation for each x,y and z 
xx_rib5_2 = interp1(t,x_rib5_2,tt,'spline');
yy_rib5_2 = interp1(t,y_rib5_2,tt,'spline');
zz_rib5_2 = interp1(t,z_rib5_2,tt,'spline');
% Visualize the result
subplot(4,2,5)
scatter3(x_rib5_1,y_rib5_1,z_rib5_1, 'MarkerEdgeColor','r')
hold on
scatter3(x_rib5_2,y_rib5_2,z_rib5_2, 'MarkerEdgeColor','b')
hold on
plot3(xx_rib5_1,yy_rib5_1,zz_rib5_1, 'color','r')
hold on
plot3(xx_rib5_2,yy_rib5_2,zz_rib5_2, 'color','b')
title('Rib 5');
hold off

subplot(4,2,6)
spline_rib_func_flip(positions_rib5);

% Interpolation 7th

x_rib7_1 = [positions_rib7(2,1);positions_rib7(1,1);positions_rib7(6,1);positions_rib7(4,1)];
y_rib7_1 = [positions_rib7(2,2);positions_rib7(1,2);positions_rib7(6,2);positions_rib7(4,2)];
z_rib7_1 = [positions_rib7(2,3);positions_rib7(1,3);positions_rib7(6,3);positions_rib7(4,3)];

xx_rib7_1 = interp1(t,x_rib7_1,tt,'spline');
yy_rib7_1 = interp1(t,y_rib7_1,tt,'spline');
zz_rib7_1 = interp1(t,z_rib7_1,tt,'spline');

x_rib7_2 = [positions_rib7(2,1);positions_rib7(3,1);positions_rib7(8,1);positions_rib7(4,1)];
y_rib7_2 = [positions_rib7(2,2);positions_rib7(3,2);positions_rib7(8,2);positions_rib7(4,2)];
z_rib7_2 = [positions_rib7(2,3);positions_rib7(3,3);positions_rib7(8,3);positions_rib7(4,3)];
% Apply interpolation for each x,y and z 
xx_rib7_2 = interp1(t,x_rib7_2,tt,'spline');
yy_rib7_2 = interp1(t,y_rib7_2,tt,'spline');
zz_rib7_2 = interp1(t,z_rib7_2,tt,'spline');


% Visualize the result
subplot(4,2,7)
scatter3(x_rib7_1,y_rib7_1,z_rib7_1, 'MarkerEdgeColor','r')
hold on
scatter3(x_rib7_2,y_rib7_2,z_rib7_2, 'MarkerEdgeColor','b')
hold on
plot3(xx_rib7_1,yy_rib7_1,zz_rib7_1, 'color','r')
hold on
plot3(xx_rib7_2,yy_rib7_2,zz_rib7_2, 'color','b')
title('Rib 7');
hold off

subplot(4,2,8)
spline_rib_func_flip(positions_rib7);

%% all ribs

figure
subplot(1,2,1)
scatter3(x_rib1_1,y_rib1_1,z_rib1_1,'MarkerEdgeColor','r')
hold on
scatter3(x_rib3_1,y_rib3_1,z_rib3_1,'MarkerEdgeColor','g')
hold on
scatter3(x_rib5_1,y_rib5_1,z_rib5_1,'MarkerEdgeColor','b')
hold on
scatter3(x_rib7_1,y_rib7_1,z_rib7_1,'MarkerEdgeColor','c')

hold on
scatter3(x_rib1_2,y_rib1_2,z_rib1_2,'MarkerEdgeColor','r')
hold on
scatter3(x_rib3_2,y_rib3_2,z_rib3_2,'MarkerEdgeColor','g')
hold on
scatter3(x_rib5_2,y_rib5_2,z_rib5_2,'MarkerEdgeColor','b')
hold on
scatter3(x_rib7_2,y_rib7_2,z_rib7_2,'MarkerEdgeColor','c')

hold on
plot3(xx_rib1_1,yy_rib1_1,zz_rib1_1,'color','r')
hold on
plot3(xx_rib3_1,yy_rib3_1,zz_rib3_1,'color','g')
hold on
plot3(xx_rib5_1,yy_rib5_1,zz_rib5_1,'color','b')
hold on
plot3(xx_rib7_1,yy_rib7_1,zz_rib7_1,'color','c')

hold on
plot3(xx_rib1_2,yy_rib1_2,zz_rib1_2,'color','r')
hold on
plot3(xx_rib3_2,yy_rib3_2,zz_rib3_2,'color','g')
hold on
plot3(xx_rib5_2,yy_rib5_2,zz_rib5_2,'color','b')
hold on
plot3(xx_rib7_2,yy_rib7_2,zz_rib7_2,'color','c')
legend('Rib1', 'Rib3', 'Rib5', 'Rib7')
title('Visualization of rib 1, 3, 5, and 7')

% all ribs with spine and sternum

% SPINE
x_spine = [positions_rib1(4,1);positions_rib3(4,1);positions_rib5(4,1);positions_rib7(4,1)];
y_spine = [positions_rib1(4,2);positions_rib3(4,2);positions_rib5(4,2);positions_rib7(4,2)];
z_spine = [positions_rib1(4,3);positions_rib3(4,3);positions_rib5(4,3);positions_rib7(4,3)];

xx_spine = interp1(t,x_spine,tt,'spline');
yy_spine = interp1(t,y_spine,tt,'spline');
zz_spine = interp1(t,z_spine,tt,'spline');

% STERNUM
x_ster = [positions_rib1(2,1);positions_rib3(2,1);positions_rib5(2,1);positions_rib7(2,1)];
y_ster = [positions_rib1(2,2);positions_rib3(2,2);positions_rib5(2,2);positions_rib7(2,2)];
z_ster = [positions_rib1(2,3);positions_rib3(2,3);positions_rib5(2,3);positions_rib7(2,3)];
xx_ster = interp1(t,x_ster,tt,'spline');
yy_ster = interp1(t,y_ster,tt,'spline');
zz_ster = interp1(t,z_ster,tt,'spline');

x_con_1 = [positions_rib1(2,1)', positions_rib1(4,1)'];
y_con_1 = [positions_rib1(2,2)', positions_rib1(4,2)'];
z_con_1 = [positions_rib1(2,3)', positions_rib1(4,3)'];

x_con_3 = [positions_rib3(2,1)', positions_rib3(4,1)'];
y_con_3 = [positions_rib3(2,2)', positions_rib3(4,2)'];
z_con_3 = [positions_rib3(2,3)', positions_rib3(4,3)'];

x_con_5 = [positions_rib5(2,1)', positions_rib5(4,1)'];
y_con_5 = [positions_rib5(2,2)', positions_rib5(4,2)'];
z_con_5 = [positions_rib5(2,3)', positions_rib5(4,3)'];

x_con_7 = [positions_rib7(2,1)', positions_rib7(4,1)'];
y_con_7 = [positions_rib7(2,2)', positions_rib7(4,2)'];
z_con_7 = [positions_rib7(2,3)', positions_rib7(4,3)'];

% Plot the line between the two points

subplot(1,2,2)
plot3(xx_spine,yy_spine,zz_spine,'color','k','LineWidth', 2)
hold on
plot3(xx_ster, yy_ster, zz_ster,'color','k','LineWidth', 2)
hold on
plot3(x_con_1, y_con_1, z_con_1, 'color','y','LineWidth', 2);
hold on
plot3(x_con_3, y_con_3, z_con_3, 'color','y','LineWidth', 2);
hold on
plot3(x_con_5, y_con_5, z_con_5, 'color','y','LineWidth', 2);
hold on
plot3(x_con_7, y_con_7, z_con_7, 'color','y','LineWidth', 2)
hold on

scatter3(x_rib1_1,y_rib1_1,z_rib1_1,'MarkerEdgeColor','r')
hold on
scatter3(x_rib3_1,y_rib3_1,z_rib3_1,'MarkerEdgeColor','g')
hold on
scatter3(x_rib5_1,y_rib5_1,z_rib5_1,'MarkerEdgeColor','b')
hold on
scatter3(x_rib7_1,y_rib7_1,z_rib7_1,'MarkerEdgeColor','c')

hold on
scatter3(x_rib1_2,y_rib1_2,z_rib1_2,'MarkerEdgeColor','r')
hold on
scatter3(x_rib3_2,y_rib3_2,z_rib3_2,'MarkerEdgeColor','g')
hold on
scatter3(x_rib5_2,y_rib5_2,z_rib5_2,'MarkerEdgeColor','b')
hold on
scatter3(x_rib7_2,y_rib7_2,z_rib7_2,'MarkerEdgeColor','c')

hold on
plot3(xx_rib1_1,yy_rib1_1,zz_rib1_1,'color','r')
hold on
plot3(xx_rib3_1,yy_rib3_1,zz_rib3_1,'color','g')
hold on
plot3(xx_rib5_1,yy_rib5_1,zz_rib5_1,'color','b')
hold on
plot3(xx_rib7_1,yy_rib7_1,zz_rib7_1,'color','c')

hold on
plot3(xx_rib1_2,yy_rib1_2,zz_rib1_2,'color','r')
hold on
plot3(xx_rib3_2,yy_rib3_2,zz_rib3_2,'color','g')
hold on
plot3(xx_rib5_2,yy_rib5_2,zz_rib5_2,'color','b')
hold on
plot3(xx_rib7_2,yy_rib7_2,zz_rib7_2,'color','c')
legend('Spine', 'Sternum', 'Connection')
title('Visualization of rib 1, 3, 5, and 7 with spine and sternum')

%% AREAS between ribs

p_rib1 = [positions_rib1(2,:); positions_rib1(1,:); positions_rib1(6,:); positions_rib1(4,:); positions_rib1(8,:); positions_rib1(3,:)];
p_rib1_spline = [p_rib1; xx_rib1_1' yy_rib1_1' zz_rib1_1'; xx_rib1_2' yy_rib1_2' zz_rib1_2'];
p_rib1_1_spline = [positions_rib1(2,:); positions_rib1(1,:); positions_rib1(6,:); positions_rib1(4,:); xx_rib1_1' yy_rib1_1' zz_rib1_1'];
p_rib1_2_spline = [positions_rib1(2,:); positions_rib1(4,:); positions_rib1(8,:); positions_rib1(3,:); xx_rib1_2' yy_rib1_2' zz_rib1_2'];

p_rib3 = [positions_rib3(2,:); positions_rib3(1,:); positions_rib3(6,:); positions_rib3(4,:); positions_rib3(8,:); positions_rib3(3,:)];
p_rib3_spline = [p_rib3; xx_rib3_1' yy_rib3_1' zz_rib3_1'; xx_rib3_2' yy_rib3_2' zz_rib3_2'];
p_rib3_1_spline = [positions_rib3(2,:); positions_rib3(1,:); positions_rib3(6,:); positions_rib3(4,:); xx_rib3_1' yy_rib3_1' zz_rib3_1'];
p_rib3_2_spline = [positions_rib3(2,:);positions_rib3(4,:); positions_rib3(8,:); positions_rib3(3,:); xx_rib3_2' yy_rib3_2' zz_rib3_2'];

p_rib5 = [positions_rib5(2,:); positions_rib5(1,:); positions_rib5(6,:); positions_rib5(4,:); positions_rib5(8,:); positions_rib5(3,:)];
p_rib5_spline = [p_rib5; xx_rib5_1' yy_rib5_1' zz_rib5_1'; xx_rib5_2' yy_rib5_2' zz_rib5_2'];
p_rib5_1_spline = [positions_rib5(2,:); positions_rib5(1,:); positions_rib5(6,:); positions_rib5(4,:); xx_rib5_1' yy_rib5_1' zz_rib5_1'];
p_rib5_2_spline = [positions_rib5(2,:); positions_rib5(4,:); positions_rib5(8,:); positions_rib5(3,:); xx_rib5_2' yy_rib5_2' zz_rib5_2'];

p_rib7 = [positions_rib7(2,:); positions_rib7(1,:); positions_rib7(6,:); positions_rib7(4,:); positions_rib7(8,:); positions_rib7(3,:)];
p_rib7_spline = [p_rib7; xx_rib7_1' yy_rib7_1' zz_rib7_1'; xx_rib7_2' yy_rib7_2' zz_rib7_2'];
p_rib7_1_spline = [positions_rib7(2,:); positions_rib7(1,:); positions_rib7(6,:); positions_rib7(4,:); xx_rib7_1' yy_rib7_1' zz_rib7_1'];
p_rib7_2_spline = [positions_rib7(2,:); positions_rib7(4,:); positions_rib7(8,:); positions_rib7(3,:); xx_rib7_2' yy_rib7_2' zz_rib7_2'];

%% Enclosed areas ribs

% Visualization of delaunay triangulation and ribs areas
figure
k = convhulln(p_rib1_spline);
trisurf(k, p_rib1_spline(:,1), p_rib1_spline(:,2), p_rib1_spline(:,3), 'FaceColor', 'red', 'FaceAlpha', 0.5);
hold on
trisurf(k, p_rib3_spline(:,1), p_rib3_spline(:,2), p_rib3_spline(:,3), 'FaceColor', 'blue', 'FaceAlpha', 0.5);
hold on
trisurf(k, p_rib5_spline(:,1), p_rib5_spline(:,2), p_rib5_spline(:,3), 'FaceColor', 'green', 'FaceAlpha', 0.5);
hold on
trisurf(k, p_rib7_spline(:,1), p_rib7_spline(:,2), p_rib7_spline(:,3), 'FaceColor', 'yellow', 'FaceAlpha', 0.5);
legend('Rib1', 'Rib3', 'Rib5', 'Rib7')
title('Visualization of enclosed rib area for ribs 1, 3, 5, and 7')

figure
subplot(4,2,1)
trisurf(k, p_rib1_spline(:,1), p_rib1_spline(:,2), p_rib1_spline(:,3), 'FaceColor', 'red', 'FaceAlpha', 0.5);
title('Rib 1')
subplot(4,2,3)
trisurf(k, p_rib3_spline(:,1), p_rib3_spline(:,2), p_rib3_spline(:,3), 'FaceColor', 'blue', 'FaceAlpha', 0.5);
title('Rib 3')
subplot(4,2,5)
trisurf(k, p_rib5_spline(:,1), p_rib5_spline(:,2), p_rib5_spline(:,3), 'FaceColor', 'green', 'FaceAlpha', 0.5);
title('Rib 5')
subplot(4,2,7)
trisurf(k, p_rib7_spline(:,1), p_rib7_spline(:,2), p_rib7_spline(:,3), 'FaceColor', 'yellow', 'FaceAlpha', 0.5);
title('Rib 7')


subplot(4,2,2)
spline_area_func_flip(p_rib1_2_spline, p_rib1_1_spline);
subplot(4,2,4)
spline_area_func_flip(p_rib3_2_spline, p_rib3_1_spline);
subplot(4,2,6)
spline_area_func_flip(p_rib5_2_spline, p_rib5_1_spline);
subplot(4,2,8)
spline_area_func_flip(p_rib7_2_spline, p_rib7_1_spline);

%% AREAS RIBS CALCULATION

% Area  RIB1
% Delaunay Triangulation
area_rib1 = spline_area_func(p_rib1_spline);
% Now, just for the concave or convex sides
area_rib1_1 = spline_area_func(p_rib1_1_spline);
area_rib1_2 = spline_area_func(p_rib1_2_spline);

% Area RIB3 

area_rib3 = spline_area_func(p_rib3_spline);
% Now, just for the concave or convex sides
area_rib3_1 = spline_area_func(p_rib3_1_spline);
area_rib3_2 = spline_area_func(p_rib3_2_spline);

% Area RIB 5

area_rib5 = spline_area_func(p_rib5_spline);
% Now, just for the concave or convex sides
area_rib5_1 = spline_area_func(p_rib5_1_spline);
area_rib5_2 = spline_area_func(p_rib5_2_spline);

% Area RIB 7
area_rib7 = spline_area_func(p_rib7_spline); 
% Now, just for the concave or convex sides
area_rib7_1 = spline_area_func(p_rib7_1_spline);
area_rib7_2 = spline_area_func(p_rib7_2_spline);

% AREAS DISPLAY
areas_rib1 = [area_rib1; area_rib1_1; area_rib1_2];
areas_rib3 = [area_rib3; area_rib3_1; area_rib3_2];
areas_rib5 = [area_rib5; area_rib5_1; area_rib5_2];

T = table(areas_rib1, areas_rib3, areas_rib5, 'RowNames', {'Total Area', 'Concave Area', 'Convex Area'});
disp('The area of the triangular surface of the different ribs is cm^2')
disp(T)


%% PCA: SHAPE ANALYSIS RIBS

% PCA helps to identify the major axis and orientation of the surfaces.

% get coords from the flipped (maybe change the output of the function)
x_rib_t_m = p_rib5_spline(:,1)';  % x-coordinates of the moving rib1
y_rib_t_m = p_rib5_spline(:,2)';  % y-coordinates of the moving rib1
z_rib_t_m = p_rib5_spline(:,3)';  % z-coordinates of the moving rib1

flippedX = - x_rib_t_m;
flippedX = flippedX - (min(flippedX(:)) - max(x_rib_t_m(:)));
flippedY = y_rib_t_m;
flippedZ = z_rib_t_m;
p_rib5_flipped = [flippedX' flippedY' flippedZ'];

% trisurfaces to patch data
[F_fix,V_fix] = surf2patch(p_rib5_spline);
[F_flip,V_flip] =  surf2patch(p_rib5_flipped);

% vertices into a single matrix
V = [V_fix; V_flip];

% PCA on the vertices
[coeff,score,latent,tsquared,explained,mu] = pca(V);

% Visualize the first two principal components
figure;
scatter(score(1:size(V_fix,1),1),score(1:size(V_fix,1),2),'filled','r');
hold on;
scatter(score(size(V_fix,1)+1:end,1),score(size(V_fix,1)+1:end,2),'filled','b');
xlabel('PC1');
ylabel('PC2');
legend('Trisurface 1','Trisurface 2');

%% The coordinates of each vertex in the principal component space are 
% represented by the principal component scores. The scores can be used 
% to quantitatively compare the trisurfaces' forms. To examine the general 
% shape of each trisurface, for instance, you may compute the distance 
% between their mean scores.

% mean scores of each trisurface
mean_score1 = mean(score(1:size(V_fix,1),:));
mean_score2 = mean(score(size(V_fix,1)+1:end,:));

% Calculate the Euclidean distance between the mean scores
distance = norm(mean_score1 - mean_score2);

% Display the distance
fprintf('Distance between mean scores: %f\n', distance);

% Calculate the percentage of variance explained by the first two principal components
fprintf('Percentage of variance explained by PC1 and PC2: %0.2f%%\n',sum(explained(1:2)));

%% Mahalanobis distance

% The Mahalanobis distance is a common metric that attempts to capture the 
% non-isotropic properties of a J-dimensional feature space. It weights the
% distance calculation according to the statistical variation of each 
% component using the covariance matrix of the observed sample

% CODE FROM CHAT-GPT
% Calculate the covariance matrix of the scores
cov_matrix = cov(score);

% Calculate the Mahalanobis distance between the mean scores
diff_mean_scores = mean_score1 - mean_score2;

% the \ sign means inv(cov_matrix)*diff_mean_score' -> I just saw it was
% way faster
mahalanobis_distance = sqrt(diff_mean_scores * (cov_matrix \ diff_mean_scores'));

% Display the distance
fprintf('Mahalanobis distance between mean scores: %f\n', mahalanobis_distance);

%% Hausdorf distance

% compute the distances between all pairs of points
distances = pdist2(p_rib5_spline, p_rib5_flipped);

% compute the Hausdorff distance --> maximum distance between the closest
% points
hausdorff_distance = max(max(min(distances,[],2)), max(min(distances,[],1)));
fprintf('Hausdorf distance between lines: %f\n', hausdorff_distance);

%% dsc

size1 = size(p_rib5_spline, 1);
size2 = size(p_rib5_flipped, 1);

% compute the number of points that are in both sets
overlap = size(intersect(p_rib5_spline, p_rib5_flipped, 'rows'), 1);

% compute the Dice score
dice_score = 2*overlap/(size1+size2);
fprintf('DSC between lines: %f\n', dice_score);


%% distance between landmark 1 and 3
% distance between all the points and find maximum
% histogram from this distances
